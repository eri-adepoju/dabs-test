name: Deploy Changed Bundles

on:
  push:
    branches:
      - main

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      bundles: ${{ steps.changed-files.outputs.bundles }}
      source_branch: ${{ steps.set-branch.outputs.FINAL_BRANCH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Extract source branch from merge commit message
      - name: Extract source branch from merge commit message
        id: extract-branch
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B ${{ github.sha }})
          SOURCE_BRANCH=$(echo "$COMMIT_MSG" | grep -oP 'from\s+\S+/\K\S+' || true)
          echo "source_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT

      # Fallback to GitHub API if extraction failed
      - name: Get source branch via GitHub API
        if: steps.extract-branch.outputs.source_branch == ''
        uses: actions/github-script@v6
        id: find-pr
        with:
          script: |
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ github.sha }}'
            });
            return prs.data[0]?.head?.ref || '';

      # Set final source branch name
      - name: Set final source branch name
        id: set-branch
        run: |
          if [ "${{ steps.extract-branch.outputs.source_branch }}" != "" ]; then
            FINAL_BRANCH="${{ steps.extract-branch.outputs.source_branch }}"
          else
            FINAL_BRANCH="${{ steps.find-pr.outputs.result }}"
          fi
          echo "FINAL_BRANCH=$FINAL_BRANCH" >> $GITHUB_OUTPUT

      # Get changed files and extract unique top-level directories (bundles)
      - name: Get changed files
        id: changed-files
        run: |
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          # Filter out files under .github directory, suppress error if no lines remain
          grep -v '^\.github/' changed_files.txt > filtered_changed_files.txt || true
          # Extract unique top-level directories (bundles) from filtered files, but only if the directory still exists
          BUNDLES=$(
            awk -F/ '{print $1}' filtered_changed_files.txt | sort | uniq | while read dir; do
              if [ -d "$dir" ]; then
                echo "$dir"
              fi
            done | jq -R -s -c 'split("\n")[:-1]'
          )
          echo "bundles=$BUNDLES" >> $GITHUB_OUTPUT
          echo "Changed bundles: $BUNDLES"


  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.bundles != '[]'
    strategy:
      matrix:
        bundle: ${{ fromJson(needs.prepare.outputs.bundles) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup databricks CLI
        uses: databricks/setup-cli@main

      - name: Deploy bundle
        run: |
          echo "Deploying bundle: ${{ matrix.bundle }} from source branch: ${{ needs.prepare.outputs.source_branch }}"
          databricks bundle deploy
        working-directory: ${{ matrix.bundle }}
        env:
          DATABRICKS_HOST:  ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN:  ${{ secrets.DATABRICKS_TOKEN }}
          # DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          # DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_BUNDLE_ENV: dev
          BUNDLE_VAR_prefix: ${{ needs.prepare.outputs.source_branch }}

